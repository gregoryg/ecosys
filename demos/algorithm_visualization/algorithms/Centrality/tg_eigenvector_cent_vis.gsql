CREATE QUERY tg_eigenvector_cent_vis(STRING v_type, STRING e_type, INT maxIter = 100, FLOAT convLimit = 0.000001, INT top_k = 3, BOOL print_accum = True, STRING result_attr = "label",STRING file_path = "", BOOL display_edges = TRUE, INT display_edges_num = 8) SYNTAX V1 { 
    /* Compute eigenvector Centrality for each VERTEX. 
    Parameters:
    v_type: vertex types to traverse                 
    e_type: edge types to traverse                   
    maxIter: max iteration
    convLimit: convergence limitation
    top_k: report only this many top scores          print_accum: weather print the result
    result_attr: attribute to write result to        file_path: file to write CSV output to
     */ 
     
    TYPEDEF TUPLE<VERTEX Vertex_ID, FLOAT score> Vertex_Score;
    HeapAccum<Vertex_Score>(top_k, score DESC) @@top_scores_heap;
    SumAccum<FLOAT> @@sum_squares_eigen_values;
    SumAccum<FLOAT> @sum_received_value;
    SumAccum<FLOAT> @sum_eigen_value = 1;
    SumAccum<FLOAT> @@sum_cur_norm_values;
    SumAccum<FLOAT> @@sum_prev_norm_values;
    FLOAT conv_value = 9999;
    FILE f (file_path);
    Start = {v_type};
    WHILE conv_value > convLimit LIMIT maxIter DO
        @@sum_squares_eigen_values = 0;
        @@sum_cur_norm_values = 0;
        V = SELECT s 
            FROM Start:s - (e_type:e) -> v_type:t
            ACCUM t.@sum_received_value += s.@sum_eigen_value
            POST-ACCUM s.@sum_eigen_value = s.@sum_received_value,
                       @@sum_squares_eigen_values += s.@sum_eigen_value * s.@sum_eigen_value,
                       s.@sum_received_value = 0;
        p = SELECT s 
            FROM V:s 
            LIMIT 10;
       
        V = SELECT s 
            FROM V:s
            POST-ACCUM s.@sum_eigen_value = s.@sum_eigen_value / sqrt(@@sum_squares_eigen_values),
                       @@sum_cur_norm_values += s.@sum_eigen_value;
        conv_value = abs(@@sum_cur_norm_values - @@sum_prev_norm_values);
        @@sum_prev_norm_values = @@sum_cur_norm_values;
    	                         
    END;
    #Output
    IF file_path != "" THEN
        f.println("Vertex_ID", "egien vector");
    END;
    Start = SELECT s 
            FROM Start:s
            ACCUM 
                IF s.@sum_eigen_value==1.0 THEN 
                    s.@sum_eigen_value+=-1 
                END
	    POST-ACCUM 
	        IF result_attr != "" THEN 
                    s.setAttr(result_attr, s.@sum_eigen_value) 
                END,
      
		IF print_accum THEN 
                    @@top_scores_heap += Vertex_Score(s, s.@sum_eigen_value) 
                END,
      
		IF file_path != "" THEN 
                    f.println(s, s.@sum_eigen_value) 
                END;

    IF print_accum THEN
        PRINT @@top_scores_heap AS top_scores;
    END;

  // Demo Display
  //OrAccum @show;                          # Mark if a vertex is displayed.
  SetAccum<VERTEX> @@vertex_set;         # list of colored vertices of display vertices, if display is needed
  SetAccum<EDGE> @@edge_set;             # list of display edges, if display is needed
  SumAccum<INT> @color_id;                # color for vertices to display
  MapAccum<VERTEX, INT> @@verId2colorId_map;                # map from vertex ID to Color ID
     
  FOREACH VerScore IN @@top_scores_heap DO
     @@vertex_set+=VerScore.Vertex_ID;
     @@verId2colorId_map+=(VerScore.Vertex_ID->1);
  END; 
  /*FOREACH VerScore IN @@bot_scores_heap DO
     @@vertex_set+=VerScore.Vertex_ID;
     @@verId2colorId_map+=(VerScore.Vertex_ID->2);
  END;*/
  
  v_display = {@@vertex_set};
     
  PRINT v_display[v_display.@sum_eigen_value, v_display.label AS label, v_display.label, v_display.@color_id];
     
  v_display = 
       SELECT t FROM v_display:s-(e_type:e)-:t
       //SAMPLE display_edges_frac% EDGE WHEN s.outdegree() >= 9
       SAMPLE display_edges_num EDGE WHEN s.outdegree() >= 0
       //WHERE t not in @@vertex_set
       ACCUM
             s.@color_id=@@verId2colorId_map.get(s),
             @@edge_set += e;
     
  PRINT v_display[v_display.@sum_eigen_value, v_display.label AS label, v_display.label, v_display.@color_id];
     
  //v_display = {v_type};
  v_display = 
       SELECT t FROM v_display:s-(e_type:e)-:t
       //SAMPLE display_edges_frac% EDGE WHEN s.outdegree() >= 9
       SAMPLE display_edges_num EDGE WHEN s.outdegree() >= 0
       //WHERE t not in @@vertex_set
       ACCUM
             s.@color_id=@@verId2colorId_map.get(s),
             @@edge_set += e;
  
  PRINT v_display[v_display.@sum_eigen_value, v_display.label AS label, v_display.label, v_display.@color_id];
     
  IF print_accum THEN
      PRINT @@top_scores_heap;
      //PRINT @@bot_scores_heap;
      IF display_edges THEN
          PRINT @@edge_set;
      END;
  END;
      
}
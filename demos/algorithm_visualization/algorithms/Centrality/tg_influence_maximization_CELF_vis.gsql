CREATE QUERY tg_influence_maximization_CELF_vis (STRING v_type, STRING e_type, STRING weight, INT top_k=15, BOOL print_accum = True, STRING result_attr = "label", STRING file_path = "", BOOL display_edges = TRUE, INT display_edges_num = 8) SYNTAX V1 {  
  /* get the vertex which has maximum influence. 
  Parameters:
  v_type: vertex types to traverse                 
  e_type: edge types to traverse                   
  weight: enter weight attribute name
  top_k: report only this many top scores          
  file_path: file to write CSV output to
  print_accum: weather print the result
   */  
  TYPEDEF TUPLE<VERTEX Vertex_ID, FLOAT score> Vertex_Score;
  HeapAccum<Vertex_Score>(top_k, score DESC) @@top_scores_heap;
  OrAccum @or_in_seed;
  OrAccum @or_influenced;
  SumAccum<FLOAT> @influence_value;
  ListAccum<Vertex_Score> @@res_list;
  VERTEX k;
  FLOAT score;
  BOOL skip=FALSE;
  FILE f (file_path);
  @@top_scores_heap.resize(top_k+3);
  all = {v_type};
  start = SELECT s 
          FROM all:s-(e_type:e)-v_type:v 
          ACCUM 
              IF weight != ""  THEN 
                  s.@influence_value+=e.getAttr(weight,"FLOAT") 
              ELSE  
                  s.@influence_value+=1 
              END
          POST-ACCUM @@top_scores_heap+=Vertex_Score(s,s.@influence_value),
                     s.@influence_value=0;
  @@res_list+=@@top_scores_heap.top();
  k= @@top_scores_heap.pop().Vertex_ID;
  temp = SELECT s 
         FROM start:s-(e_type:e)-v_type:v 
         WHERE s==k
         ACCUM v.@or_influenced+=TRUE,s.@or_in_seed+=TRUE;
  k= @@top_scores_heap.pop().Vertex_ID;
  score = @@top_scores_heap.top().score;
  WHILE @@res_list.size()<top_k DO
      one = SELECT s 
            FROM all:s-(e_type:e)-v_type:v 
            WHERE s==k AND s.@or_in_seed == FALSE AND v.@or_influenced == FALSE
            ACCUM 
                IF weight != ""  THEN 
                    s.@influence_value+=e.getAttr(weight,"FLOAT") 
                ELSE  
                    s.@influence_value+=1 
                END 
            POST-ACCUM 
                IF s.@influence_value>=score THEN 
                    @@res_list+=Vertex_Score(s,s.@influence_value),skip=TRUE 
                END,
                   s.@influence_value=0;
      IF skip THEN 
          skip=FALSE;
          one = SELECT v 
                FROM all:s-(e_type:e)-v_type:v 
                WHERE s==k
                ACCUM v.@or_influenced+=TRUE,s.@or_in_seed+=TRUE;
          k= @@top_scores_heap.pop().Vertex_ID;
          score = @@top_scores_heap.top().score;
          CONTINUE;
      END;
      @@top_scores_heap.clear();
      start = SELECT s 
              FROM all:s-(e_type:e)-v_type:v 
              WHERE s.@or_in_seed == FALSE and v.@or_influenced == FALSE 
              ACCUM 
                  IF weight != ""  THEN 
                      s.@influence_value+=e.getAttr(weight,"FLOAT") 
                  ELSE  
                      s.@influence_value+=1 
                  END
              POST-ACCUM 
                  @@top_scores_heap+=Vertex_Score(s,s.@influence_value),
                  s.@influence_value=0;
      @@res_list+=@@top_scores_heap.top();
      k= @@top_scores_heap.pop().Vertex_ID;
      temp = SELECT s 
             FROM start:s-(e_type:e)-v_type:v 
             WHERE s==k
             ACCUM v.@or_influenced+=TRUE,
                   s.@or_in_seed+=TRUE;
      k= @@top_scores_heap.pop().Vertex_ID;
      score = @@top_scores_heap.top().score;
  END;
  
  #Output
  IF file_path != "" THEN
      f.println("Vertex_ID", "Vertex Rank");
      FOREACH i IN RANGE[0,@@res_list.size()-1] DO
          f.println(@@res_list.get(i).Vertex_ID,i+1);
      END;
  END;
  
  IF print_accum THEN
     PRINT @@res_list;
  END;
  
  // Demo Display
  //OrAccum @show;                          # Mark if a vertex is displayed.
  SetAccum<VERTEX> @@vertex_set;         # list of colored vertices of display vertices, if display is needed
  SetAccum<EDGE> @@edge_set;             # list of display edges, if display is needed
  SumAccum<INT> @color_id;                # color for vertices to display
  MapAccum<VERTEX, INT> @@verId2colorId_map;                # map from vertex ID to Color ID
  FLOAT MAX_score = -1;
  SumAccum<FLOAT> @score_normalized;
  
  FOREACH VerScore IN @@res_list DO
     MAX_score = max([MAX_score,VerScore.score]);
  END;
  
  FOREACH VerScore IN @@res_list DO
     @@vertex_set+=VerScore.Vertex_ID;
     @@verId2colorId_map+=(VerScore.Vertex_ID->1);
     ver_temp = {@@vertex_set};
     ver_temp = SELECT s FROM ver_temp:s WHERE s==VerScore.Vertex_ID
                POST-ACCUM IF result_attr != "" THEN s.setAttr(result_attr, VerScore.score/MAX_score) END;
  END; 
  
  v_display = {@@vertex_set};
  PRINT v_display[v_display.label, v_display.@color_id];
     
  v_display = 
       SELECT t FROM v_display:s-(e_type:e)-:t
       //SAMPLE display_edges_frac% EDGE WHEN s.outdegree() >= 9
       SAMPLE display_edges_num EDGE WHEN s.outdegree() >= 0
       //WHERE t not in @@vertex_set
       ACCUM
             s.@color_id=@@verId2colorId_map.get(s),
             @@edge_set += e;
     
  PRINT v_display[v_display.label, v_display.@color_id];
     
  //v_display = {v_type};
  v_display = 
       SELECT t FROM v_display:s-(e_type:e)-:t
       //SAMPLE display_edges_frac% EDGE WHEN s.outdegree() >= 9
       SAMPLE display_edges_num EDGE WHEN s.outdegree() >= 0
       //WHERE t not in @@vertex_set
       ACCUM
             s.@color_id=@@verId2colorId_map.get(s),
             @@edge_set += e;
  
  PRINT v_display[v_display.label, v_display.@color_id];
     
  IF print_accum THEN
      //PRINT @@top_scores_heap;
      //PRINT @@bot_scores_heap;
      IF display_edges THEN
          PRINT @@edge_set;
      END;
  END;
  
}
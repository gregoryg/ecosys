CREATE QUERY tg_degree_cent_vis (STRING v_type, STRING e_type, STRING re_type, BOOL in_degree = TRUE, BOOL out_degree = TRUE, INT top_k=3, BOOL print_accum = TRUE, STRING result_attr = "label",STRING file_path = "", BOOL display_edges = TRUE, INT display_edges_num = 8) SYNTAX V1 {
  /* Compute degree Centrality for each VERTEX.
  Parameters:
  v_type: vertex types to traverse
  e_type: edge types to traverse
  re_type: for indegree use
  in_degree: if you want to count incoming relationships, set it to TRUE
  out_degree: if you want to count outcoming relationships, set it to TRUE
  top_k: report only this many top scores          print_accum: weather print the result
  result_attr: attribute to write result to        file_path: file to write CSV output to
  for undirected graph, you only need to set e_type and indegree
   */
  TYPEDEF TUPLE<VERTEX Vertex_ID, FLOAT score> Vertex_Score;
  HeapAccum<Vertex_Score>(top_k, score DESC) @@top_scores_heap;
  SumAccum<INT> @sum_degree_score;
  FILE f (file_path);

  all = {v_type};
  sll = SELECT s 
        FROM all:s
        ACCUM IF in_degree THEN
                 /*FOREACH edge_type in re_type DO
                     s.@sum_degree_score+=s.outdegree(edge_type)
                 END*/
                 s.@sum_degree_score+=s.outdegree(re_type)
              END,
              IF out_degree THEN
                  /*FOREACH edge_type in e_type DO
                      s.@sum_degree_score+=s.outdegree(edge_type)
                  END*/
                 s.@sum_degree_score+=s.outdegree(e_type)
              END;
  #Output
  IF file_path != "" THEN
      f.println("Vertex_ID", "Degree");
  END;

  Start = SELECT s 
          FROM all:s
	  POST-ACCUM    
	      IF print_accum THEN 
                  @@top_scores_heap += Vertex_Score(s, s.@sum_degree_score) 
              END,
    
	      IF file_path != "" THEN 
                  f.println(s, s.@sum_degree_score) 
              END;
	      
   IF print_accum THEN
       PRINT @@top_scores_heap AS top_scores;
   END;

  // Demo Display
  //OrAccum @show;                          # Mark if a vertex is displayed.
  SetAccum<VERTEX> @@vertex_set;         # list of colored vertices of display vertices, if display is needed
  SetAccum<EDGE> @@edge_set;             # list of display edges, if display is needed
  SumAccum<INT> @color_id;                # color for vertices to display
  MapAccum<VERTEX, INT> @@verId2colorId_map;                # map from vertex ID to Color ID
  FLOAT MAX_score;
  SumAccum<FLOAT> @sum_degree_score_normalized;
  
  MAX_score = @@top_scores_heap.top().score;
  all = {v_type};
  all = SELECT s FROM all:s
        POST-ACCUM s.@sum_degree_score_normalized += s.@sum_degree_score/MAX_score,
                   IF result_attr != "" THEN s.setAttr(result_attr, s.@sum_degree_score_normalized) END;
  
  FOREACH VerScore IN @@top_scores_heap DO
     @@vertex_set+=VerScore.Vertex_ID;
     @@verId2colorId_map+=(VerScore.Vertex_ID->1);
  END; 
  /*FOREACH VerScore IN @@bot_scores_heap DO
     @@vertex_set+=VerScore.Vertex_ID;
     @@verId2colorId_map+=(VerScore.Vertex_ID->2);
  END;*/
  
  v_display = {@@vertex_set};
     
  PRINT v_display[v_display.@sum_degree_score, v_display.label, v_display.@color_id];
     
  v_display = 
       SELECT t FROM v_display:s-(e_type:e)-:t
       //SAMPLE display_edges_frac% EDGE WHEN s.outdegree() >= 9
       SAMPLE display_edges_num EDGE WHEN s.outdegree() >= 0
       //WHERE t not in @@vertex_set
       ACCUM
             s.@color_id=@@verId2colorId_map.get(s),
             @@edge_set += e;
     
  PRINT v_display[v_display.@sum_degree_score, v_display.label, v_display.@color_id];
     
  //v_display = {v_type};
  v_display = 
       SELECT t FROM v_display:s-(e_type:e)-:t
       //SAMPLE display_edges_frac% EDGE WHEN s.outdegree() >= 9
       SAMPLE display_edges_num EDGE WHEN s.outdegree() >= 0
       //WHERE t not in @@vertex_set
       ACCUM
             s.@color_id=@@verId2colorId_map.get(s),
             @@edge_set += e;
  
  PRINT v_display[v_display.@sum_degree_score, v_display.label, v_display.@color_id];
     
  IF print_accum THEN
      PRINT @@top_scores_heap;
      //PRINT @@bot_scores_heap;
      IF display_edges THEN
          PRINT @@edge_set;
      END;
  END;
}
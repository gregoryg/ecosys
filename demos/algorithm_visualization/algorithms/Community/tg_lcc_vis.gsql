CREATE QUERY tg_lcc_vis (STRING v_type, STRING e_type, INT top_k=5, BOOL print_accum = True, STRING result_attr = "label", STRING file_path = "", BOOL display_edges = TRUE, INT display_edges_num = 15) SYNTAX V1 { 
   /*      
   The Local Clustering Coefficient algorithm computes the local clustering coefficient 
   for each node in the graph. 
   lcc = Number_trangles/((n-1)n/2)
   Here n is the outdegreeof vertex.
  Parameters:
  v_type: vertex types to traverse                 print_accum: print JSON output
  e_type: edge types to traverse                   result_attr: INT attr to store results to
  top_k: report only this many top scores          file_path: file to write CSV output to
  display_edges: output edges for visualization
   */
   
  TYPEDEF TUPLE<VERTEX Vertex_ID, FLOAT score> Vertex_Score;
  HeapAccum<Vertex_Score>(top_k, score DESC) @@top_scores_heap;
  SumAccum<FLOAT> @sum_tri; #number of trangles
  SumAccum<FLOAT> @sum_lcc; #lcc value
  SetAccum<int> @neighbors_set; #neighbors set
  OrAccum @or_self_con; #check if the vertex is self-connect
  //SetAccum<EDGE> @@edge_set;
  FILE f (file_path);
  # Here we compute the intersection for 2 points on the triangle.
  
  Start = {v_type};
  Start = SELECT s 
          FROM Start:s-(e_type)-v_type:t
          ACCUM 
              IF getvid(s) != getvid(t) THEN 
                  t.@neighbors_set += getvid(s)
              ELSE   
                  t.@or_self_con+=TRUE 
              END;# check id the vertex is self-connect
                           
  Start = SELECT s 
          FROM Start:s-(e_type)-v_type:t
          WHERE s.outdegree(e_type)>1
          ACCUM 
              s.@sum_tri+=COUNT((s.@neighbors_set INTERSECT t.@neighbors_set))
          POST-ACCUM 
              IF s.@or_self_con  AND s.outdegree(e_type)<3 THEN 
                      s.@sum_lcc+=0
              ELSE IF s.@or_self_con AND s.outdegree(e_type)>2 THEN 
                      s.@sum_lcc+= (((s.@sum_tri+1-s.outdegree(e_type)))/((s.outdegree(e_type)-2)*(s.outdegree(e_type)-1)))
              ELSE 
                      s.@sum_lcc+= ((s.@sum_tri)/((s.outdegree(e_type)-0)*(s.outdegree(e_type)-1)))
              END;
        
  #output
  Start = SELECT s 
          FROM Start:s
          # Calculate Closeness Centrality for each vertex
	        POST-ACCUM 
	            IF print_accum THEN 
	                @@top_scores_heap += Vertex_Score(s, s.@sum_lcc) 
                    END,
	            IF file_path != "" THEN 
	                f.println(s, s.@sum_lcc) 
	            END;
	      
  IF file_path != "" THEN
      f.println("Vertex_ID", "lcc");
  END;

  /*IF print_accum THEN
      PRINT @@top_scores_heap AS top_scores;
      IF display_edges THEN
          PRINT Start[Start.@sum_lcc];
	  Start = SELECT s
		  FROM Start:s -(e_type:e)->:t
		  ACCUM @@edge_set += e;
		  PRINT @@edge_set;
      END;
  END;*/
  
// Demo Display
//OrAccum @show;                          # Mark if a vertex is displayed.
SetAccum<VERTEX> @@v_display_set;         # list of colored vertices of display vertices, if display is needed
SetAccum<EDGE> @@e_display_set;             # list of display edges, if display is needed
SumAccum<INT> @color_id;                # color for vertices to display
MapAccum<VERTEX, INT> @@verId2colorId_map;                # map from vertex ID to Color ID
FLOAT MAX_score;
SumAccum<FLOAT> @score_normalized;

MAX_score = @@top_scores_heap.top().score;
all = {v_type};
all = SELECT s FROM all:s
        POST-ACCUM s.@score_normalized += s.@sum_lcc/MAX_score,
                   IF result_attr != "" THEN s.setAttr(result_attr, s.@score_normalized) END;  
  
FOREACH VerScore IN @@top_scores_heap DO
   @@v_display_set+=VerScore.Vertex_ID;
   @@verId2colorId_map+=(VerScore.Vertex_ID->1);
END;
//PRINT @@verId2colorId_map;
  
v_display = {@@v_display_set};
v_display = 
     SELECT s FROM v_display:s
     ACCUM
           s.@color_id=@@verId2colorId_map.get(s);
  
PRINT v_display[v_display.@sum_lcc, v_display.label, v_display.@color_id];
   
v_display = 
     SELECT t FROM v_display:s-(e_type:e)-:t
     //SAMPLE display_edges_frac% EDGE WHEN s.outdegree() >= 9
     SAMPLE display_edges_num EDGE WHEN s.outdegree() >= 0
     //WHERE t not in @@v_display_set
     ACCUM @@e_display_set += e;
   
PRINT v_display[v_display.@sum_lcc, v_display.label, v_display.@color_id];
   
//v_display = {v_type};
v_display = 
     SELECT t FROM v_display:s-(e_type:e)-:t
     //SAMPLE display_edges_frac% EDGE WHEN s.outdegree() >= 9
     SAMPLE display_edges_num EDGE WHEN s.outdegree() >= 0
     //WHERE t not in @@v_display_set
     ACCUM
           s.@color_id=@@verId2colorId_map.get(s),
           @@e_display_set += e;

PRINT v_display[v_display.@sum_lcc, v_display.label, v_display.@color_id];
   
IF print_accum THEN
    PRINT @@top_scores_heap;
    //PRINT @@bot_scores_heap;
    IF display_edges THEN
        PRINT @@e_display_set;
    END;
END;
  
}
CREATE QUERY tg_label_prop_vis (STRING v_type, STRING e_type, INT max_iter=20, BOOL print_accum = TRUE, STRING file_path = "", STRING result_attr = "label", INT comm_display_size=200) SYNTAX V1 {
# Partition the vertices into communities, according to the Label Propagation method.
# Indicate community membership by assigning each vertex a community ID.

OrAccum @@or_changed = true;
MapAccum<INT, INT> @map;     # <communityId, numNeighbors>
MapAccum<INT, INT> @@comm_sizes_map;   # <communityId, members>
SumAccum<INT> @sum_label, @sum_num;  
FILE f (file_path);
Start = {v_type};

# Assign unique labels to each vertex
Start = SELECT s 
        FROM Start:s 
        ACCUM s.@sum_label = getvid(s);

# Propagate labels to neighbors until labels converge or the max iterations is reached
WHILE @@or_changed == true LIMIT max_iter DO
    @@or_changed = false;
    Start = SELECT s 
            FROM Start:s -(e_type:e)-> :t
            ACCUM t.@map += (s.@sum_label -> 1)  # count the occurrences of neighbor's labels
            POST-ACCUM
                INT max_v = 0,
                INT label = 0,
                # Iterate over the map to get the neighbor label that occurs most often
                FOREACH (k,v) IN t.@map DO
                    CASE WHEN v > max_v THEN
                        max_v = v,
                        label = k
                    END
                END,
                # When the neighbor search finds a label AND it is a new label
                # AND the label's count has increased, update the label.
                CASE WHEN label != 0 AND t.@sum_label != label AND max_v > t.@sum_num THEN
                    @@or_changed += true,
                    t.@sum_label = label,
                    t.@sum_num = max_v
                END,
                t.@map.clear();
END;

  // Demo display
  SumAccum<FLOAT> @color_id;
  OrAccum @show;
  MapAccum<INT, INT> @@size2compId_map;
  MapAccum<INT, INT> @@compId2colorId_map;
  SetAccum<VERTEX> @@v_display_set;
  SetAccum<EDGE> @@e_display_set;
  
  Start = {v_type};
  Start =  SELECT s 
           FROM Start:s
           POST-ACCUM                 
               IF file_path != "" THEN 
                   f.println(s, s.@sum_label) 
               END,
                 
               IF print_accum THEN 
                   @@comm_sizes_map += (s.@sum_label -> 1) 
               END;

  INT idx=0;
  FOREACH (compId, size) IN @@comm_sizes_map DO
     @@size2compId_map += (size -> compId);
     @@compId2colorId_map += (compId -> idx);
     idx = idx+1;
  END;
    
  // print result satistic
  IF print_accum THEN
      PRINT @@comm_sizes_map.size() AS FinalCommunityCount;
      PRINT @@size2compId_map as size2compId_map;
      PRINT @@comm_sizes_map as compId2size_map;
  END;
  
  v_all = {v_type};
  v_display = {v_type};
  FOREACH (compId, colorID) IN @@compId2colorId_map DO
    IF colorID<comm_display_size THEN 
      v_display_seed = SELECT s FROM v_display:s WHERE s.@sum_label==compId 
                       POST-ACCUM s.@color_id=colorID, 
                                  IF result_attr != "" THEN s.setAttr(result_attr, s.@color_id/idx) END 
                       LIMIT 1;
      v_display_seed = SELECT s FROM v_display_seed:s POST-ACCUM @@v_display_set+=s;
    END;
  END;
  
  v_display={@@v_display_set};
  v_display = 
      SELECT t FROM v_display:s-(e_type:e)-v_type:t
      WHERE s.@color_id-t.@color_id<1/(v_all.size()*10)
      ACCUM @@v_display_set+=s, @@v_display_set+=t, @@e_display_set+=e;
  v_display = 
      SELECT t FROM v_display:s-(e_type:e)-v_type:t
      WHERE s.@color_id-t.@color_id<1/(v_all.size()*10)
      ACCUM @@v_display_set+=s, @@v_display_set+=t, @@e_display_set+=e;
  v_display={@@v_display_set};
  v_display = 
      SELECT t FROM v_display:s-(e_type:e)-v_type:t
      ACCUM @@v_display_set+=t, @@e_display_set+=e;
  
      
  v_display={@@v_display_set};
  PRINT v_display[v_display.@color_id, v_display.label];
  PRINT @@e_display_set;
  
  
}
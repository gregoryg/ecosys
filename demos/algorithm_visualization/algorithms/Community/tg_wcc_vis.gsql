CREATE QUERY tg_wcc_vis (STRING v_type, STRING e_type, BOOL print_accum = TRUE, STRING result_attr = "label", STRING file_path = "", INT comp_display_size=50) SYNTAX V1 {
/*
 This query identifies the Connected Components (undirected edges). When finished, each
 vertex is assigned an INT label = its component ID number.
  v_type: vertex types to traverse          print_accum: print JSON output
  e_type: edge types to traverse            result_attr: INT attr to store results to
  file_path: file to write CSV output to    display_edges: output edges for visualization
  output_limit: max #vertices to output (-1 = all)  
  comp_display_size: number of detected component to display
*/

MinAccum<INT> @min_cc_id = 0;       //each vertex's tentative component id
MapAccum<INT, INT> @@comp_sizes_map;
MapAccum<INT, ListAccum<INT>> @@comp_group_by_size_map;
SumAccum<FLOAT> @color_id;
MapAccum<INT, INT> @@compId2colorId_map;
SetAccum<VERTEX> @@v_display_set;
SetAccum<EDGE> @@e_display_set;
FILE f(file_path); 

Start = {v_type};

# Initialize: Label each vertex with its own internal ID
S = SELECT x 
    FROM Start:x
    POST-ACCUM x.@min_cc_id = getvid(x);

# Propagate smaller internal IDs until no more ID changes can be Done
WHILE (S.size()>0) DO
    S = SELECT t
        FROM S:s -(e_type:e)- v_type:t
	ACCUM t.@min_cc_id += s.@min_cc_id // If s has smaller id than t, copy the id to t
	HAVING t.@min_cc_id != t.@min_cc_id';
END;
IF file_path != "" THEN
    f.println("Vertex_ID","Component_ID");
END;

Start = {v_type};
Start = SELECT s 
        FROM Start:s
	POST-ACCUM 	    
	    IF print_accum THEN 
	        @@comp_sizes_map += (s.@min_cc_id -> 1) 
	    END,
	    
	    IF file_path != "" THEN 
	        f.println(s, s.@min_cc_id) 
	    END;
INT idx=0;
IF print_accum THEN
    /*IF output_limit >= 0 THEN
        Start = SELECT s 
                FROM Start:s 
                LIMIT output_limit;
    END;*/
    FOREACH (compId,size) IN @@comp_sizes_map DO
       @@comp_group_by_size_map += (size -> compId);
       @@compId2colorId_map += (compId -> idx);
       idx = idx+1;
    END;
    PRINT @@comp_group_by_size_map as size2compId_map;
    PRINT @@comp_sizes_map as compId2size_map;
    //PRINT Start[Start.@min_cc_id];
END;

// Demo display

/*
v_display = {v_type};
v_display = SELECT s FROM v_display:s
	          POST-ACCUM s.@color_id=@@compId2colorId_map.get(s.@min_cc_id),
                       IF result_attr != "" THEN s.setAttr(result_attr, s.@color_id/idx) END;
v_display = 
    SELECT s FROM v_display:s-(e_type:e)-v_type:t
    ACCUM IF (@@compId2colorId_map.get(s.@min_cc_id) < comp_display_size) THEN
              @@v_display_set+=s,
              @@v_display_set+=t,
              @@e_display_set+=e
          END;
  
v_display = 
    SELECT t FROM v_display:s-(e_type:e)-v_type:t 
    ACCUM  
        IF (@@compId2colorId_map.get(s.@min_cc_id) < comp_display_size) AND (@@compId2colorId_map.get(t.@min_cc_id) < comp_display_size) THEN
            @@v_display_set+=s,
            @@v_display_set+=t,
            @@e_display_set+=e
        END;
v_display={@@v_display_set};
v_display = 
    SELECT t FROM v_display:s-(e_type:e)-v_type:t 
    ACCUM @@v_display_set+=t, @@e_display_set+=e;
*/
v_all = {v_type};
v_display = {v_type};
FOREACH (compId, colorID) IN @@compId2colorId_map DO
  IF colorID<comp_display_size THEN 
    v_display_seed = SELECT s FROM v_display:s WHERE s.@min_cc_id==compId 
                     POST-ACCUM s.@color_id=colorID, 
                                IF result_attr != "" THEN s.setAttr(result_attr, s.@color_id/idx) END 
                     LIMIT 1;
    v_display_seed = SELECT s FROM v_display_seed:s POST-ACCUM @@v_display_set+=s;
  END;
END;

v_display={@@v_display_set};
v_display = 
    SELECT t FROM v_display:s-(e_type:e)-v_type:t
    WHERE s.@color_id-t.@color_id<1/(v_all.size()*10)
    ACCUM @@v_display_set+=s, @@v_display_set+=t, @@e_display_set+=e;
v_display = 
    SELECT t FROM v_display:s-(e_type:e)-v_type:t
    WHERE s.@color_id-t.@color_id<1/(v_all.size()*10)
    ACCUM @@v_display_set+=s, @@v_display_set+=t, @@e_display_set+=e;
v_display={@@v_display_set};
v_display = 
    SELECT t FROM v_display:s-(e_type:e)-v_type:t
    ACCUM @@e_display_set+=e;
    
v_display={@@v_display_set};
PRINT v_display[v_display.@color_id, v_display.label];
PRINT @@e_display_set;

}
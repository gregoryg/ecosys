CREATE QUERY tg_scc_vis (STRING v_type, STRING e_type, STRING rev_e_type, INT top_k_dist, INT max_iter = 500, INT iter_wcc = 5, BOOL print_accum = TRUE, STRING result_attr= "label", STRING file_path="", INT comp_display_size=10) SYNTAX V1 { 
    //INT iter_end_trim = 3
/* This query detects strongly connected components based on the following papers:
 * https://www.sandia.gov/~apinar/papers/irreg00.pdf
 * https://www.sciencedirect.com/science/article/pii/S0743731505000535
 * https://stanford-ppl.github.io/website/papers/sc13-hong.pdf

 * iter: number of iteration of the algorithm
 * iter_wcc: find weakly connected components for the active vertices in this iteration, since the largest sccs are already found after several iterations; usually a small number(3 to 10)
 * top_k_dist: top k result in scc distribution

 * DISTRIBUTED QUERY mode for this query is supported from TG 2.4.
 */
TYPEDEF TUPLE <INT csize, INT num> cluster_num;
MapAccum<INT, INT> @@cluster_size_map, @@cluster_dist_map;
HeapAccum<cluster_num>(top_k_dist, csize DESC) @@cluster_dist_heap;
OrAccum @or_is_forward, @or_is_backward, @or_detached, @or_has_pos_indegree, @or_has_pos_outdegree, @or_wcc_active;
SumAccum<INT> @sum_cid, @sum_vid;
MinAccum<INT> @@min_vid, @min_wcc_id_curr, @min_wcc_id_prev;
SumAccum<STRING> @sum_flag;
MapAccum<INT, MinAccum<INT>> @@f_cid_map, @@b_cid_map, @@n_cid_map, @@s_cid_map;
  
MapAccum<INT, ListAccum<INT>> @@comp_group_by_size_map;
SumAccum<FLOAT> @color_id;
MapAccum<INT, INT> @@compId2colorId_map;
SetAccum<VERTEX> @@v_display_set;
SetAccum<EDGE> @@e_display_set;
  
FILE f (file_path);
INT i = 1;
v_all = {v_type};
tmp(ANY) ={};

active = SELECT s
	 FROM v_all:s
	 ACCUM 
             s.@sum_vid = getvid(s),
	     @@min_vid += getvid(s)
	 POST-ACCUM 
             s.@sum_cid = @@min_vid;

WHILE active.size()>0 LIMIT max_iter DO	
    WHILE TRUE DO   
        tmp =  SELECT s
	       FROM active:s -(e_type:e) -> :t
	       WHERE t.@or_detached == FALSE AND s.@sum_cid == t.@sum_cid
	       ACCUM 
                   s.@or_has_pos_outdegree = TRUE;

	tmp =  SELECT s
	       FROM active:s -(rev_e_type:e) -> :t
	       WHERE t.@or_detached == FALSE AND s.@sum_cid == t.@sum_cid
	       ACCUM s.@or_has_pos_indegree = TRUE;
    
	trim_set = SELECT s
		   FROM active:s
		   WHERE s.@or_has_pos_indegree == FALSE OR s.@or_has_pos_outdegree == FALSE
		   ACCUM 
                       s.@or_detached = TRUE,
		       s.@sum_cid = s.@sum_vid;

	IF trim_set.size() == 0 THEN  // no single SCC anymore, terminate the while loop
	    BREAK;
	END;
    
	active = SELECT s
		 FROM active:s 
		 WHERE s.@or_detached == FALSE
		 ACCUM 
                     @@n_cid_map += (s.@sum_cid -> s.@sum_vid)
		 POST-ACCUM 
                     s.@sum_cid = @@n_cid_map.get(s.@sum_cid),
		     s.@or_has_pos_indegree = FALSE,
		     s.@or_has_pos_outdegree = FALSE; 
	@@n_cid_map.clear();
    END;
    //END;
    // get WCC
    IF i == iter_wcc THEN
        active = SELECT s
		 FROM active:s
		 POST-ACCUM 
                     s.@min_wcc_id_curr = s.@sum_vid,
		     s.@min_wcc_id_prev = s.@sum_vid;
        curr = active;
	WHILE (curr.size()>0) DO
	    curr = SELECT t
	           FROM curr:s -((e_type|rev_e_type):e)-> :t
		   WHERE s.@sum_cid == t.@sum_cid AND t.@or_detached == FALSE
		   ACCUM 
                       t.@min_wcc_id_curr += s.@min_wcc_id_prev // If s has a smaller id than t, copy the id to t
		   POST-ACCUM
	               CASE WHEN t.@min_wcc_id_prev != t.@min_wcc_id_curr THEN // If t's id has changed
		           t.@min_wcc_id_prev = t.@min_wcc_id_curr,
			   t.@or_wcc_active = true
		       ELSE 
			   t.@or_wcc_active = false
		       END
		       HAVING t.@or_wcc_active == true;       
	END;
	active = SELECT s
		 FROM active:s
		 ACCUM 
                     s.@sum_cid = s.@min_wcc_id_curr;
     END;
     i = i + 1;

     pivots = SELECT s
	      FROM active:s 
	      WHERE s.@sum_cid == s.@sum_vid
	      ACCUM 
                  s.@or_is_forward = TRUE,
		  s.@or_is_backward = TRUE;

     // mark forward set
     curr = pivots;
     WHILE curr.size()>0 DO
         curr = SELECT t 
		FROM curr:s -(e_type:e)->:t  // edge
		WHERE t.@or_detached == FALSE AND t.@or_is_forward == FALSE AND s.@sum_cid == t.@sum_cid // not traversed
		ACCUM 
                    t.@or_is_forward = TRUE;
     END;

     // mark backward set
     curr = pivots;
     WHILE curr.size()>0 DO
         curr = SELECT t 
		FROM curr:s -(rev_e_type:e)->:t  // reverse edge
		WHERE t.@or_detached == FALSE AND t.@or_is_backward == FALSE AND s.@sum_cid == t.@sum_cid // not traversed
		ACCUM t.@or_is_backward = TRUE;
     END;

     active = SELECT s
	      FROM active:s 
	      ACCUM 
                  IF s.@or_is_forward == TRUE AND s.@or_is_backward == TRUE THEN  // scc
		      s.@or_detached = TRUE,
		      @@s_cid_map += (s.@sum_cid -> s.@sum_vid)
		  ELSE IF s.@or_is_forward == TRUE THEN  // forward set   
		      @@f_cid_map += (s.@sum_cid -> s.@sum_vid)
		  ELSE IF s.@or_is_backward == TRUE THEN    // backward set
		      @@b_cid_map += (s.@sum_cid -> s.@sum_vid)
		  ELSE 
		      @@n_cid_map += (s.@sum_cid -> s.@sum_vid)   // null set
		  END	
	      POST-ACCUM 
                  IF s.@or_is_forward == TRUE AND s.@or_is_backward == TRUE THEN //scc
		      s.@sum_cid = @@s_cid_map.get(s.@sum_cid)
		  END,
		  IF s.@or_is_forward == TRUE THEN
		      IF s.@or_is_backward == FALSE THEN   // forward set
		          s.@sum_cid = @@f_cid_map.get(s.@sum_cid)
		      END
		  ELSE
		      IF s.@or_is_backward == TRUE THEN    // backward set
		          s.@sum_cid = @@b_cid_map.get(s.@sum_cid) 
		      ELSE                              // null set
			  s.@sum_cid = @@n_cid_map.get(s.@sum_cid) 
		      END
		  END,
		  s.@or_is_forward = FALSE,
		  s.@or_is_backward = FALSE
	      HAVING s.@or_detached == FALSE;

      @@s_cid_map.clear();
      @@f_cid_map.clear();
      @@b_cid_map.clear();
      @@n_cid_map.clear();
END;

// result
IF file_path != "" THEN
    f.println("Vertex_ID","Component_ID");
END;

v_all = SELECT s FROM v_all:s 
	      POST-ACCUM IF print_accum THEN @@cluster_size_map += (s.@sum_cid -> 1) END,
                   IF file_path != "" THEN f.println(s, s.@sum_cid) END;

INT idx=0;
IF print_accum THEN
    FOREACH (compId,size) IN @@cluster_size_map DO
       @@comp_group_by_size_map += (size -> compId);
       @@compId2colorId_map += (compId -> idx);
       @@cluster_dist_map += (size -> 1);
       idx = idx+1;
    END;
  
    FOREACH (csize, number) IN @@cluster_dist_map DO
    @@cluster_dist_heap += cluster_num(csize, number);
    END;
  
    PRINT @@comp_group_by_size_map as size2compId_map;
    PRINT @@cluster_size_map as compId2size_map;
    PRINT @@cluster_dist_map;
END;
        

// Demo display
    
/*
v_display = SELECT s FROM v_display:s
	          POST-ACCUM s.@color_id=@@compId2colorId_map.get(s.@sum_cid),
                       IF result_attr != "" THEN s.setAttr(result_attr, s.@color_id/idx) END;
v_display = 
    SELECT s FROM v_display:s-(e_type:e)-v_type:t
    ACCUM IF (@@compId2colorId_map.get(s.@sum_cid) < comp_display_size) THEN
              @@v_display_set+=s,
              @@v_display_set+=t,
              @@e_display_set+=e
          END;
  
v_display = 
    SELECT t FROM v_display:s-(e_type:e)-v_type:t 
    ACCUM  
        IF (@@compId2colorId_map.get(s.@sum_cid) < comp_display_size) AND (@@compId2colorId_map.get(t.@sum_cid) < comp_display_size) THEN
            @@v_display_set+=s,
            @@v_display_set+=t,
            @@e_display_set+=e
        END;
v_display={@@v_display_set};
v_display = 
    SELECT t FROM v_display:s-(e_type:e)-v_type:t 
    ACCUM @@v_display_set+=t, @@e_display_set+=e;
*/

v_display = {v_type};
FOREACH (compId, colorID) IN @@compId2colorId_map DO
  IF colorID<comp_display_size THEN 
    v_display_seed = SELECT s FROM v_display:s WHERE s.@sum_cid==compId 
                     POST-ACCUM s.@color_id=colorID, 
                                IF result_attr != "" THEN s.setAttr(result_attr, s.@color_id/idx) END 
                     LIMIT 1;
    v_display_seed = SELECT s FROM v_display_seed:s POST-ACCUM @@v_display_set+=s;
  END;
END;

v_display={@@v_display_set};
v_display = 
    SELECT t FROM v_display:s-(e_type:e)-v_type:t
    WHERE s.@color_id-t.@color_id<1/(v_all.size()*10)
    ACCUM @@v_display_set+=s, @@v_display_set+=t, @@e_display_set+=e;
v_display = 
    SELECT t FROM v_display:s-(e_type:e)-v_type:t
    WHERE s.@color_id-t.@color_id<1/(v_all.size()*10)
    ACCUM @@v_display_set+=s, @@v_display_set+=t, @@e_display_set+=e;
v_display={@@v_display_set};
v_display = 
    SELECT t FROM v_display:s-(e_type:e)-v_type:t
    ACCUM @@v_display_set+=t, @@e_display_set+=e;
  
v_display={@@v_display_set};
PRINT v_display[v_display.@color_id, v_display.label];
PRINT @@e_display_set;
  
}
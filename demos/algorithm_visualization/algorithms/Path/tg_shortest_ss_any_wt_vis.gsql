CREATE QUERY tg_shortest_ss_any_wt_vis (VERTEX source, STRING v_type, STRING e_type,
 STRING wt_attr="weight", STRING wt_type="FLOAT", INT output_limit = 3, BOOL print_accum = TRUE,
 STRING result_attr = "label", STRING file_path = "", BOOL display_edges = TRUE) SYNTAX V1 {
   
/*
 Single-source shortest path algorithm, with weight edges, possibly negative.
 From the source vertex, finds the weighted shortest path (FLOAT value).
 The Bellman-Ford algorithm for Single-Source Shortest Path with edge weights,
 is used.  If any loop in the graph has a net negative weight, the algorithm will exit.
 source: start vertex                            print_accum: print JSON output
 v_type: vertex types to traverse                result_attr: INT attr to store results to
 e_type: edge types to traverse                  file_path: file to write CSV output to
 wt_attr: attribute for edge weights             output_limit: max #vertices to output
 wt_type: weight data type (INT,FLOAT,DOUBLE)    display_edges: output edges for visualization
*/

  TYPEDEF TUPLE<FLOAT dist, VERTEX pred> Path_Tuple;    
  HeapAccum<Path_Tuple>(1, dist ASC) @min_path_heap;       # retain 1 shortest path
  ListAccum<STRING> @path_list;                    # shortest path FROM source
  OrAccum @or_visited;
  OrAccum @@or_has_neg_loop;                 # Indicates a negative loop is found
  FILE f(file_path);
  INT iter;
  STRING msg40999 = "There is a loop with negative length. Shortest path is undefined.";
  EXCEPTION neg_loop_excep (40999);

  # Check wt_type parameter
  IF wt_type NOT IN ("INT", "FLOAT", "DOUBLE") THEN
      PRINT "wt_type must be INT, FLOAT, or DOUBLE" AS errMsg;
      RETURN;
  END;

  ##### Initialize #####
  start = {source};
  component = {source};                 # the connected component of the source vertex
  start = SELECT s
    FROM start:s
    POST-ACCUM s.@min_path_heap += Path_Tuple(0, s),
         s.@or_visited = TRUE,
         s.@path_list += s.ID;
  
  ##### Get the connected component #####      
  WHILE start.size() > 0 DO
      start = SELECT t
        FROM start:s -(e_type:e)-> v_type:t
        WHERE NOT t.@or_visited
        ACCUM t.@or_visited = TRUE;
      component = component UNION start;
  END;
  PRINT component.size();
  
  ##### Do N-1 iterations: Consider whether each edge lowers the best-known distance.
  iter = component.size() - 1;    # the max iteration is N-1
  WHILE TRUE LIMIT iter DO 
      tmp = SELECT s
            FROM component:s -(e_type:e)-> v_type:t
      ACCUM 
          IF s.@min_path_heap.size()>0 /*AND s.@minPath.top().dist < GSQL_INT_MAX*1.0*/ THEN
                    CASE wt_type
                        WHEN "INT" THEN
          t.@min_path_heap += Path_Tuple(s.@min_path_heap.top().dist + e.getAttr(wt_attr, "INT"), s)
                        WHEN "FLOAT" THEN
                            t.@min_path_heap += Path_Tuple(s.@min_path_heap.top().dist + e.getAttr(wt_attr, "FLOAT"), s)
                        WHEN "DOUBLE" THEN
                            t.@min_path_heap += Path_Tuple(s.@min_path_heap.top().dist + e.getAttr(wt_attr, "DOUBLE"), s)
                        END
    END;
  END;

  ##### Check for loops with net negative weight #####
  component = SELECT s
        FROM component:s -(e_type:e)-> v_type:t
        ACCUM CASE wt_type
                  WHEN "INT" THEN
          @@or_has_neg_loop +=
          s.@min_path_heap.top().dist + e.getAttr(wt_attr,"INT") < t.@min_path_heap.top().dist
                  WHEN "FLOAT" THEN
                      @@or_has_neg_loop +=
          s.@min_path_heap.top().dist + e.getAttr(wt_attr,"FLOAT") < t.@min_path_heap.top().dist
                  WHEN "DOUBLE" THEN
                      @@or_has_neg_loop +=
          s.@min_path_heap.top().dist + e.getAttr(wt_attr,"DOUBLE") < t.@min_path_heap.top().dist   
                  END;
 
  IF @@or_has_neg_loop THEN        
      RAISE neg_loop_excep (msg40999);
  END;

  ##### Calculate the paths #####
  start = {source};
  tmp = SELECT s
  FROM component:s
  WHERE s != source
  POST-ACCUM s.@or_visited = FALSE;
  WHILE start.size() > 0 LIMIT iter DO     # Limit the number of hops
      start = SELECT t
        FROM start:s -(e_type:e)-> v_type:t
        WHERE NOT t.@or_visited
        ACCUM IF s == t.@min_path_heap.top().pred THEN 
        t.@or_visited = TRUE,
        t.@path_list += s.@path_list,
        t.@path_list += s.ID
        END;
  END;
  
  ##### Output #####
  IF file_path != "" THEN
      f.println("Vertex_ID","Distance","Shortest_Path");
  END;

  component = SELECT s 
              FROM component:s
              POST-ACCUM 
                  IF result_attr != "" THEN 
                      s.setAttr(result_attr, s.@min_path_heap.top().dist) 
                  END,
                  IF file_path != "" THEN 
                      f.println(s, s.@min_path_heap.top().dist, s.@path_list) 
                  END;    
   
   // Demo Display
   SetAccum<EDGE> @@edge_set;          # list of all edges, if display_edges is needed
   SetAccum<STRING> @@v_display_set;
   SetAccum<STRING> @@path;
   SumAccum<INT> @color_id; 
   v_display = {v_type.*};
   //PRINT v_display[v_display.@min_path_heap.top().dist, v_display.@path_list, v_display.@color_id];
   //S = SELECT s FROM v_display:s-(Coauthorship:e)-v_type:t ACCUM e.score=1;
   
   IF print_accum THEN
       IF output_limit >= 0 THEN
           v_display = SELECT s FROM component:s 
                       LIMIT  output_limit;
           v_display = SELECT s FROM v_display:s
                       ACCUM  s.@color_id=1, @@v_display_set+=s.ID;
       END;
       PRINT v_display[v_display.@min_path_heap.top().dist, v_display.@path_list, v_display.@color_id];
       
       FOREACH i IN @@v_display_set DO
           @@path.clear();
           ss = {source};
           ss = SELECT s FROM ss:s ACCUM @@path+=s.ID;
           @@path+=i;
           PRINT @@path;
           all = {v_type.*};
           v1 = SELECT s FROM all:s WHERE s.ID==i ACCUM FOREACH j in s.@path_list DO IF j!="" THEN @@path+=j END END;
           PRINT @@path;
           v2 = SELECT s FROM all:s-(e_type:e)-:t WHERE s.ID in @@path and t.ID in @@path ACCUM e.score=10, @@edge_set+=e;
           PRINT @@path;
           //PRINT @@edge_set;
       END;
   
       
       IF display_edges THEN
           tmp = SELECT s FROM component:s -(e_type:e)-> v_type:t
                 ACCUM @@edge_set += e;
                 PRINT @@edge_set;
       END;
       
   END;
}